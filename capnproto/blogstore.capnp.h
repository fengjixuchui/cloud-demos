// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: blogstore.capnp

#ifndef CAPNP_INCLUDED_f79af02aadd13d6d_
#define CAPNP_INCLUDED_f79af02aadd13d6d_

#include <capnp/generated-header-support.h>
#include <capnp/capability.h>

#if CAPNP_VERSION != 4000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif



struct Date {
  Date() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct Blog {
  Blog() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct BlogStore {
  BlogStore() = delete;

  class Client;
  class Server;

  struct LoadResult;
  struct LoadParams;
  struct LoadResults;
  struct StoreParams;
  struct StoreResults;
  struct RemoveParams;
  struct RemoveResults;
};

struct BlogStore::LoadResult {
  LoadResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Result;
};

struct BlogStore::LoadResult::Result {
  Result() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    FAILURE,
    BLOG,
  };
};

struct BlogStore::LoadParams {
  LoadParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct BlogStore::LoadResults {
  LoadResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct BlogStore::StoreParams {
  StoreParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct BlogStore::StoreResults {
  StoreResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct BlogStore::RemoveParams {
  RemoveParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct BlogStore::RemoveResults {
  RemoveResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};


// =======================================================================================

namespace capnp {
namespace schemas {

extern const ::capnp::_::RawSchema s_c98ddf8008d07b25;
extern const ::capnp::_::RawSchema s_a1c39818762bf4d5;
extern const ::capnp::_::RawSchema s_d913d02fef2e3677;
extern const ::capnp::_::RawSchema s_f12fd6f4a0abc2c8;
extern const ::capnp::_::RawSchema s_9403ef900674d257;
extern const ::capnp::_::RawSchema s_93fc241ab4875bc2;
extern const ::capnp::_::RawSchema s_8389d78916a857e2;
extern const ::capnp::_::RawSchema s_d5ebd678ed185817;
extern const ::capnp::_::RawSchema s_adf94634952488e2;
extern const ::capnp::_::RawSchema s_a2c24aef282f4c24;
extern const ::capnp::_::RawSchema s_f370bad15e0d9711;

}  // namespace schemas
namespace _ {  // private

CAPNP_DECLARE_STRUCT(
    ::Date, c98ddf8008d07b25,
    1, 0, FOUR_BYTES);
CAPNP_DECLARE_STRUCT(
    ::Blog, a1c39818762bf4d5,
    0, 4, INLINE_COMPOSITE);
CAPNP_DECLARE_INTERFACE(
    ::BlogStore, d913d02fef2e3677);
CAPNP_DECLARE_STRUCT(
    ::BlogStore::LoadResult, f12fd6f4a0abc2c8,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::BlogStore::LoadResult::Result, 9403ef900674d257,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::BlogStore::LoadParams, 93fc241ab4875bc2,
    1, 0, EIGHT_BYTES);
CAPNP_DECLARE_STRUCT(
    ::BlogStore::LoadResults, 8389d78916a857e2,
    0, 1, POINTER);
CAPNP_DECLARE_STRUCT(
    ::BlogStore::StoreParams, d5ebd678ed185817,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::BlogStore::StoreResults, adf94634952488e2,
    1, 0, BIT);
CAPNP_DECLARE_STRUCT(
    ::BlogStore::RemoveParams, a2c24aef282f4c24,
    1, 0, EIGHT_BYTES);
CAPNP_DECLARE_STRUCT(
    ::BlogStore::RemoveResults, f370bad15e0d9711,
    0, 0, VOID);

}  // namespace _ (private)
}  // namespace capnp

// =======================================================================================


class Date::Reader {
public:
  typedef Date Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline  ::int16_t getYear() const;

  inline  ::uint8_t getMonth() const;

  inline  ::uint8_t getDay() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Date::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Date::Reader reader) {
  return ::capnp::_::structString<Date>(reader._reader);
}

class Date::Builder {
public:
  typedef Date Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline  ::int16_t getYear();
  inline void setYear( ::int16_t value);

  inline  ::uint8_t getMonth();
  inline void setMonth( ::uint8_t value);

  inline  ::uint8_t getDay();
  inline void setDay( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Date::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Date::Builder builder) {
  return ::capnp::_::structString<Date>(builder._builder.asReader());
}

class Date::Pipeline {
public:
  typedef Date Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class Blog::Reader {
public:
  typedef Blog Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasData() const;
  inline  ::Date::Reader getData() const;

  inline bool hasAuthor() const;
  inline  ::capnp::Text::Reader getAuthor() const;

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

  inline bool hasBody() const;
  inline  ::capnp::Text::Reader getBody() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Blog::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Blog::Reader reader) {
  return ::capnp::_::structString<Blog>(reader._reader);
}

class Blog::Builder {
public:
  typedef Blog Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasData();
  inline  ::Date::Builder getData();
  inline void setData( ::Date::Reader value);
  inline  ::Date::Builder initData();
  inline void adoptData(::capnp::Orphan< ::Date>&& value);
  inline ::capnp::Orphan< ::Date> disownData();

  inline bool hasAuthor();
  inline  ::capnp::Text::Builder getAuthor();
  inline void setAuthor( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAuthor(unsigned int size);
  inline void adoptAuthor(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAuthor();

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

  inline bool hasBody();
  inline  ::capnp::Text::Builder getBody();
  inline void setBody( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBody(unsigned int size);
  inline void adoptBody(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBody();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Blog::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Blog::Builder builder) {
  return ::capnp::_::structString<Blog>(builder._builder.asReader());
}

class Blog::Pipeline {
public:
  typedef Blog Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Date::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class BlogStore::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef BlogStore Calls;
  typedef BlogStore Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename T, typename = ::kj::EnableIf< ::kj::canConvert<T*, Server*>()>>
  Client(::kj::Own<T>&& server);
  template <typename T, typename = ::kj::EnableIf< ::kj::canConvert<T*, Client*>()>>
  Client(::kj::Promise<T>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request<BlogStore::LoadParams, BlogStore::LoadResults> loadRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<BlogStore::StoreParams, BlogStore::StoreResults> storeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request<BlogStore::RemoveParams, BlogStore::RemoveResults> removeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class BlogStore::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef BlogStore Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef BlogStore::LoadParams LoadParams;
  typedef BlogStore::LoadResults LoadResults;
  typedef ::capnp::CallContext<LoadParams, LoadResults> LoadContext;
  virtual ::kj::Promise<void> load(LoadContext context);
  typedef BlogStore::StoreParams StoreParams;
  typedef BlogStore::StoreResults StoreResults;
  typedef ::capnp::CallContext<StoreParams, StoreResults> StoreContext;
  virtual ::kj::Promise<void> store(StoreContext context);
  typedef BlogStore::RemoveParams RemoveParams;
  typedef BlogStore::RemoveResults RemoveResults;
  typedef ::capnp::CallContext<RemoveParams, RemoveResults> RemoveContext;
  virtual ::kj::Promise<void> remove(RemoveContext context);

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};

class BlogStore::LoadResult::Reader {
public:
  typedef LoadResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline Result::Reader getResult() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadResult::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadResult::Reader reader) {
  return ::capnp::_::structString<BlogStore::LoadResult>(reader._reader);
}

class BlogStore::LoadResult::Builder {
public:
  typedef LoadResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline Result::Builder getResult();
  inline Result::Builder initResult();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadResult::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadResult::Builder builder) {
  return ::capnp::_::structString<BlogStore::LoadResult>(builder._builder.asReader());
}

class BlogStore::LoadResult::Pipeline {
public:
  typedef LoadResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline Result::Pipeline getResult();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class BlogStore::LoadResult::Result::Reader {
public:
  typedef Result Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline Which which() const;
  inline bool isFailure() const;
  inline bool hasFailure() const;
  inline  ::capnp::Text::Reader getFailure() const;

  inline bool isBlog() const;
  inline bool hasBlog() const;
  inline  ::Blog::Reader getBlog() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadResult::Result::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadResult::Result::Reader reader) {
  return ::capnp::_::structString<BlogStore::LoadResult::Result>(reader._reader);
}

class BlogStore::LoadResult::Result::Builder {
public:
  typedef Result Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline Which which();
  inline bool isFailure();
  inline bool hasFailure();
  inline  ::capnp::Text::Builder getFailure();
  inline void setFailure( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFailure(unsigned int size);
  inline void adoptFailure(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFailure();

  inline bool isBlog();
  inline bool hasBlog();
  inline  ::Blog::Builder getBlog();
  inline void setBlog( ::Blog::Reader value);
  inline  ::Blog::Builder initBlog();
  inline void adoptBlog(::capnp::Orphan< ::Blog>&& value);
  inline ::capnp::Orphan< ::Blog> disownBlog();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadResult::Result::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadResult::Result::Builder builder) {
  return ::capnp::_::structString<BlogStore::LoadResult::Result>(builder._builder.asReader());
}

class BlogStore::LoadResult::Result::Pipeline {
public:
  typedef Result Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class BlogStore::LoadParams::Reader {
public:
  typedef LoadParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline  ::uint64_t getKey() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadParams::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadParams::Reader reader) {
  return ::capnp::_::structString<BlogStore::LoadParams>(reader._reader);
}

class BlogStore::LoadParams::Builder {
public:
  typedef LoadParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline  ::uint64_t getKey();
  inline void setKey( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadParams::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadParams::Builder builder) {
  return ::capnp::_::structString<BlogStore::LoadParams>(builder._builder.asReader());
}

class BlogStore::LoadParams::Pipeline {
public:
  typedef LoadParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class BlogStore::LoadResults::Reader {
public:
  typedef LoadResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasResult() const;
  inline  ::BlogStore::LoadResult::Reader getResult() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadResults::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadResults::Reader reader) {
  return ::capnp::_::structString<BlogStore::LoadResults>(reader._reader);
}

class BlogStore::LoadResults::Builder {
public:
  typedef LoadResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasResult();
  inline  ::BlogStore::LoadResult::Builder getResult();
  inline void setResult( ::BlogStore::LoadResult::Reader value);
  inline  ::BlogStore::LoadResult::Builder initResult();
  inline void adoptResult(::capnp::Orphan< ::BlogStore::LoadResult>&& value);
  inline ::capnp::Orphan< ::BlogStore::LoadResult> disownResult();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadResults::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::LoadResults::Builder builder) {
  return ::capnp::_::structString<BlogStore::LoadResults>(builder._builder.asReader());
}

class BlogStore::LoadResults::Pipeline {
public:
  typedef LoadResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::BlogStore::LoadResult::Pipeline getResult();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class BlogStore::StoreParams::Reader {
public:
  typedef StoreParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline  ::uint64_t getKey() const;

  inline bool hasValue() const;
  inline  ::Blog::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::StoreParams::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::StoreParams::Reader reader) {
  return ::capnp::_::structString<BlogStore::StoreParams>(reader._reader);
}

class BlogStore::StoreParams::Builder {
public:
  typedef StoreParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline  ::uint64_t getKey();
  inline void setKey( ::uint64_t value);

  inline bool hasValue();
  inline  ::Blog::Builder getValue();
  inline void setValue( ::Blog::Reader value);
  inline  ::Blog::Builder initValue();
  inline void adoptValue(::capnp::Orphan< ::Blog>&& value);
  inline ::capnp::Orphan< ::Blog> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::StoreParams::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::StoreParams::Builder builder) {
  return ::capnp::_::structString<BlogStore::StoreParams>(builder._builder.asReader());
}

class BlogStore::StoreParams::Pipeline {
public:
  typedef StoreParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Blog::Pipeline getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class BlogStore::StoreResults::Reader {
public:
  typedef StoreResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool getResult() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::StoreResults::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::StoreResults::Reader reader) {
  return ::capnp::_::structString<BlogStore::StoreResults>(reader._reader);
}

class BlogStore::StoreResults::Builder {
public:
  typedef StoreResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool getResult();
  inline void setResult(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::StoreResults::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::StoreResults::Builder builder) {
  return ::capnp::_::structString<BlogStore::StoreResults>(builder._builder.asReader());
}

class BlogStore::StoreResults::Pipeline {
public:
  typedef StoreResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class BlogStore::RemoveParams::Reader {
public:
  typedef RemoveParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline  ::uint64_t getKey() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::RemoveParams::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::RemoveParams::Reader reader) {
  return ::capnp::_::structString<BlogStore::RemoveParams>(reader._reader);
}

class BlogStore::RemoveParams::Builder {
public:
  typedef RemoveParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline  ::uint64_t getKey();
  inline void setKey( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::RemoveParams::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::RemoveParams::Builder builder) {
  return ::capnp::_::structString<BlogStore::RemoveParams>(builder._builder.asReader());
}

class BlogStore::RemoveParams::Pipeline {
public:
  typedef RemoveParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class BlogStore::RemoveResults::Reader {
public:
  typedef RemoveResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::RemoveResults::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::RemoveResults::Reader reader) {
  return ::capnp::_::structString<BlogStore::RemoveResults>(reader._reader);
}

class BlogStore::RemoveResults::Builder {
public:
  typedef RemoveResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BlogStore::RemoveResults::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(BlogStore::RemoveResults::Builder builder) {
  return ::capnp::_::structString<BlogStore::RemoveResults>(builder._builder.asReader());
}

class BlogStore::RemoveResults::Pipeline {
public:
  typedef RemoveResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

// =======================================================================================

inline  ::int16_t Date::Reader::getYear() const {
  return _reader.getDataField< ::int16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int16_t Date::Builder::getYear() {
  return _builder.getDataField< ::int16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Date::Builder::setYear( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Date::Reader::getMonth() const {
  return _reader.getDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint8_t Date::Builder::getMonth() {
  return _builder.getDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Date::Builder::setMonth( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Date::Reader::getDay() const {
  return _reader.getDataField< ::uint8_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint8_t Date::Builder::getDay() {
  return _builder.getDataField< ::uint8_t>(
      3 * ::capnp::ELEMENTS);
}
inline void Date::Builder::setDay( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool Blog::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Blog::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Date::Reader Blog::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::Date>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Date::Builder Blog::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::Date>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Date::Pipeline Blog::Pipeline::getData() {
  return  ::Date::Pipeline(_typeless.getPointerField(0));
}
inline void Blog::Builder::setData( ::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::Date>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Date::Builder Blog::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::Date>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Blog::Builder::adoptData(
    ::capnp::Orphan< ::Date>&& value) {
  ::capnp::_::PointerHelpers< ::Date>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Date> Blog::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::Date>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Blog::Reader::hasAuthor() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Blog::Builder::hasAuthor() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Blog::Reader::getAuthor() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Blog::Builder::getAuthor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Blog::Builder::setAuthor( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Blog::Builder::initAuthor(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Blog::Builder::adoptAuthor(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Blog::Builder::disownAuthor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Blog::Reader::hasTitle() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Blog::Builder::hasTitle() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Blog::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Blog::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Blog::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Blog::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Blog::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Blog::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Blog::Reader::hasBody() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Blog::Builder::hasBody() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Blog::Reader::getBody() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Blog::Builder::getBody() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Blog::Builder::setBody( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Blog::Builder::initBody(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Blog::Builder::adoptBody(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Blog::Builder::disownBody() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline BlogStore::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline BlogStore::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename T, typename>
inline BlogStore::Client::Client(::kj::Own<T>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename T, typename>
inline BlogStore::Client::Client(::kj::Promise<T>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline BlogStore::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline BlogStore::Client& BlogStore::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline BlogStore::Client& BlogStore::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

inline BlogStore::LoadResult::Result::Reader BlogStore::LoadResult::Reader::getResult() const {
  return BlogStore::LoadResult::Result::Reader(_reader);
}
inline BlogStore::LoadResult::Result::Builder BlogStore::LoadResult::Builder::getResult() {
  return BlogStore::LoadResult::Result::Builder(_builder);
}
inline BlogStore::LoadResult::Result::Pipeline BlogStore::LoadResult::Pipeline::getResult() {
  return BlogStore::LoadResult::Result::Pipeline(_typeless.noop());
}
inline BlogStore::LoadResult::Result::Builder BlogStore::LoadResult::Builder::initResult() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return BlogStore::LoadResult::Result::Builder(_builder);
}
inline BlogStore::LoadResult::Result::Which BlogStore::LoadResult::Result::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline BlogStore::LoadResult::Result::Which BlogStore::LoadResult::Result::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool BlogStore::LoadResult::Result::Reader::isFailure() const {
  return which() == BlogStore::LoadResult::Result::FAILURE;
}
inline bool BlogStore::LoadResult::Result::Builder::isFailure() {
  return which() == BlogStore::LoadResult::Result::FAILURE;
}
inline bool BlogStore::LoadResult::Result::Reader::hasFailure() const {
  if (which() != BlogStore::LoadResult::Result::FAILURE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool BlogStore::LoadResult::Result::Builder::hasFailure() {
  if (which() != BlogStore::LoadResult::Result::FAILURE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BlogStore::LoadResult::Result::Reader::getFailure() const {
  KJ_IREQUIRE(which() == BlogStore::LoadResult::Result::FAILURE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BlogStore::LoadResult::Result::Builder::getFailure() {
  KJ_IREQUIRE(which() == BlogStore::LoadResult::Result::FAILURE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void BlogStore::LoadResult::Result::Builder::setFailure( ::capnp::Text::Reader value) {
  _builder.setDataField<BlogStore::LoadResult::Result::Which>(
      0 * ::capnp::ELEMENTS, BlogStore::LoadResult::Result::FAILURE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BlogStore::LoadResult::Result::Builder::initFailure(unsigned int size) {
  _builder.setDataField<BlogStore::LoadResult::Result::Which>(
      0 * ::capnp::ELEMENTS, BlogStore::LoadResult::Result::FAILURE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void BlogStore::LoadResult::Result::Builder::adoptFailure(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<BlogStore::LoadResult::Result::Which>(
      0 * ::capnp::ELEMENTS, BlogStore::LoadResult::Result::FAILURE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BlogStore::LoadResult::Result::Builder::disownFailure() {
  KJ_IREQUIRE(which() == BlogStore::LoadResult::Result::FAILURE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool BlogStore::LoadResult::Result::Reader::isBlog() const {
  return which() == BlogStore::LoadResult::Result::BLOG;
}
inline bool BlogStore::LoadResult::Result::Builder::isBlog() {
  return which() == BlogStore::LoadResult::Result::BLOG;
}
inline bool BlogStore::LoadResult::Result::Reader::hasBlog() const {
  if (which() != BlogStore::LoadResult::Result::BLOG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool BlogStore::LoadResult::Result::Builder::hasBlog() {
  if (which() != BlogStore::LoadResult::Result::BLOG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Blog::Reader BlogStore::LoadResult::Result::Reader::getBlog() const {
  KJ_IREQUIRE(which() == BlogStore::LoadResult::Result::BLOG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Blog>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Blog::Builder BlogStore::LoadResult::Result::Builder::getBlog() {
  KJ_IREQUIRE(which() == BlogStore::LoadResult::Result::BLOG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Blog>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void BlogStore::LoadResult::Result::Builder::setBlog( ::Blog::Reader value) {
  _builder.setDataField<BlogStore::LoadResult::Result::Which>(
      0 * ::capnp::ELEMENTS, BlogStore::LoadResult::Result::BLOG);
  ::capnp::_::PointerHelpers< ::Blog>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Blog::Builder BlogStore::LoadResult::Result::Builder::initBlog() {
  _builder.setDataField<BlogStore::LoadResult::Result::Which>(
      0 * ::capnp::ELEMENTS, BlogStore::LoadResult::Result::BLOG);
  return ::capnp::_::PointerHelpers< ::Blog>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void BlogStore::LoadResult::Result::Builder::adoptBlog(
    ::capnp::Orphan< ::Blog>&& value) {
  _builder.setDataField<BlogStore::LoadResult::Result::Which>(
      0 * ::capnp::ELEMENTS, BlogStore::LoadResult::Result::BLOG);
  ::capnp::_::PointerHelpers< ::Blog>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Blog> BlogStore::LoadResult::Result::Builder::disownBlog() {
  KJ_IREQUIRE(which() == BlogStore::LoadResult::Result::BLOG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Blog>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t BlogStore::LoadParams::Reader::getKey() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t BlogStore::LoadParams::Builder::getKey() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void BlogStore::LoadParams::Builder::setKey( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool BlogStore::LoadResults::Reader::hasResult() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool BlogStore::LoadResults::Builder::hasResult() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::BlogStore::LoadResult::Reader BlogStore::LoadResults::Reader::getResult() const {
  return ::capnp::_::PointerHelpers< ::BlogStore::LoadResult>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::BlogStore::LoadResult::Builder BlogStore::LoadResults::Builder::getResult() {
  return ::capnp::_::PointerHelpers< ::BlogStore::LoadResult>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::BlogStore::LoadResult::Pipeline BlogStore::LoadResults::Pipeline::getResult() {
  return  ::BlogStore::LoadResult::Pipeline(_typeless.getPointerField(0));
}
inline void BlogStore::LoadResults::Builder::setResult( ::BlogStore::LoadResult::Reader value) {
  ::capnp::_::PointerHelpers< ::BlogStore::LoadResult>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::BlogStore::LoadResult::Builder BlogStore::LoadResults::Builder::initResult() {
  return ::capnp::_::PointerHelpers< ::BlogStore::LoadResult>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void BlogStore::LoadResults::Builder::adoptResult(
    ::capnp::Orphan< ::BlogStore::LoadResult>&& value) {
  ::capnp::_::PointerHelpers< ::BlogStore::LoadResult>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::BlogStore::LoadResult> BlogStore::LoadResults::Builder::disownResult() {
  return ::capnp::_::PointerHelpers< ::BlogStore::LoadResult>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t BlogStore::StoreParams::Reader::getKey() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t BlogStore::StoreParams::Builder::getKey() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void BlogStore::StoreParams::Builder::setKey( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool BlogStore::StoreParams::Reader::hasValue() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool BlogStore::StoreParams::Builder::hasValue() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Blog::Reader BlogStore::StoreParams::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::Blog>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Blog::Builder BlogStore::StoreParams::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::Blog>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Blog::Pipeline BlogStore::StoreParams::Pipeline::getValue() {
  return  ::Blog::Pipeline(_typeless.getPointerField(0));
}
inline void BlogStore::StoreParams::Builder::setValue( ::Blog::Reader value) {
  ::capnp::_::PointerHelpers< ::Blog>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Blog::Builder BlogStore::StoreParams::Builder::initValue() {
  return ::capnp::_::PointerHelpers< ::Blog>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void BlogStore::StoreParams::Builder::adoptValue(
    ::capnp::Orphan< ::Blog>&& value) {
  ::capnp::_::PointerHelpers< ::Blog>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Blog> BlogStore::StoreParams::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::Blog>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool BlogStore::StoreResults::Reader::getResult() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool BlogStore::StoreResults::Builder::getResult() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void BlogStore::StoreResults::Builder::setResult(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t BlogStore::RemoveParams::Reader::getKey() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t BlogStore::RemoveParams::Builder::getKey() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void BlogStore::RemoveParams::Builder::setKey( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_f79af02aadd13d6d_
